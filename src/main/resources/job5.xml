<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <import resource="bitronix.xml"/>
    <import resource="job-core.xml"/>

    <bean id="errorCache" class="org.inanme.springbatch.Job5.ErrorCache"/>
    <bean id="myJobExecutionListener" class="org.inanme.springbatch.Job5.MyJobExecutionListener"
          c:cache-ref="errorCache"/>
    <bean id="contextLoader1" class="org.inanme.springbatch.Job5.ExecutionContextLoader" scope="step">
        <constructor-arg>
            <bean class="org.inanme.spring.ConstantStringSupplier" c:value="Message 1"/>
        </constructor-arg>
    </bean>
    <bean id="contextLoader2" class="org.inanme.springbatch.Job5.ExecutionContextLoader" scope="step">
        <constructor-arg>
            <bean class="org.inanme.spring.ConstantStringSupplier" c:value="Message 2"/>
        </constructor-arg>
    </bean>
    <bean id="persistEntity" class="org.inanme.springbatch.Job5$PersistEntity"
          c:customPojoRepository-ref="customPojoRepository"/>
    <bean id="errorProneStep" class="org.inanme.springbatch.Job5.ErrorProneStep"/>
    <bean id="errorProneProcessor" class="org.inanme.springbatch.Job8Support.ErrorProneProcessor" scope="step"/>
    <bean id="constantlyFailingStep" class="org.inanme.springbatch.Job5.ConstantlyFailingStep"/>

    <bean id="job5.reader" class="org.inanme.springbatch.Job5.Reader" scope="step"
          c:from="#{jobParameters['from']}"
          c:to="#{jobParameters['to']}"/>
    <bean id="job5.processor" class="org.inanme.springbatch.Job5.Processor" scope="step"
          c:cache-ref="errorCache"
          c:fail="#{jobParameters['fail']?:false}"/>
    <bean id="job5.writer" class="org.inanme.springbatch.Job5.Writer" scope="step"
          c:cache-ref="errorCache"
          c:customPojoRepository-ref="customPojoRepository"
          c:entityManager-ref="entityManager"/>

    <batch:job id="job5" job-repository="simpleJobRepository">

        <batch:listeners>
            <batch:listener ref="myJobExecutionListener"/>
        </batch:listeners>

        <batch:step id="job5.contextLoader1" next="job5.contextLoader2">
            <batch:tasklet ref="persistEntity"
                           transaction-manager="transactionManager"/>
        </batch:step>

        <batch:step id="job5.contextLoader2">
            <batch:tasklet transaction-manager="transactionManager">
                <batch:chunk reader="job5.reader"
                             processor="job5.processor"
                             writer="job5.writer"
                             retry-limit="2"
                             commit-interval="10">
                    <batch:retryable-exception-classes>
                        <batch:include class="org.inanme.springbatch.Job5$TryAgainException"/>
                    </batch:retryable-exception-classes>
                </batch:chunk>
            </batch:tasklet>
        </batch:step>

    </batch:job>

    <batch:job id="job6" job-repository="simpleJobRepository">

        <batch:step id="job6.step1" next="job6.step2" allow-start-if-complete="true">
            <batch:tasklet ref="contextLoader1"
                           transaction-manager="transactionManager"/>
        </batch:step>

        <batch:step id="job6.step2" next="job6.step3">
            <batch:tasklet ref="contextLoader2"
                           transaction-manager="transactionManager"/>
        </batch:step>

        <batch:step id="job6.step3">
            <batch:tasklet ref="errorProneStep"
                           transaction-manager="transactionManager"/>
        </batch:step>

    </batch:job>

    <batch:job id="job7" job-repository="simpleJobRepository">

        <batch:step id="job7.step1">
            <batch:tasklet ref="constantlyFailingStep" start-limit="3"
                           transaction-manager="transactionManager"/>
        </batch:step>

    </batch:job>

    <util:properties id="job8Properties">
        <prop key="job8.commit-interval">2</prop>
    </util:properties>
    <context:property-placeholder properties-ref="job8Properties"/>

    <bean id="job8.reader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
          p:dataSource-ref="dataSource" p:pageSize="${job8.commit-interval}" abstract="true"/>

    <bean id="data.migrator.ugrap.queryProvider"
          class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean"
          p:dataSource-ref="dataSource" abstract="true"/>

    <bean id="job8.user.reader" parent="job8.reader" scope="step">
        <property name="rowMapper" ref="userRowMapper"/>
        <property name="queryProvider">
            <bean parent="data.migrator.ugrap.queryProvider"
                  p:selectClause="select id, name"
                  p:fromClause="FROM source_user">
                <property name="sortKeys">
                    <map>
                        <entry key="id" value="ASCENDING"/>
                    </map>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="job8.group.reader" parent="job8.reader" scope="step">
        <property name="rowMapper" ref="groupRowMapper"/>
        <property name="queryProvider">
            <bean parent="data.migrator.ugrap.queryProvider"
                  p:selectClause="select id, name"
                  p:fromClause="FROM source_group">
                <property name="sortKeys">
                    <map>
                        <entry key="id" value="ASCENDING"/>
                    </map>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="job8.user.writer" class="org.springframework.batch.item.data.RepositoryItemWriter"
          p:repository-ref="userRepository" p:methodName="save"/>

    <bean id="job8.group.writer" class="org.springframework.batch.item.data.RepositoryItemWriter"
          p:repository-ref="groupRepository" p:methodName="save"/>

    <batch:job id="job8" job-repository="simpleJobRepository">

        <batch:step id="job8.migrate.users" next="job8.migrate.groups">
            <batch:tasklet transaction-manager="transactionManager">
                <batch:chunk reader="job8.user.reader" writer="job8.user.writer"
                             commit-interval="${job8.commit-interval}">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>

        <batch:step id="job8.migrate.groups">
            <batch:tasklet transaction-manager="transactionManager">
                <batch:chunk reader="job8.group.reader" processor="errorProneProcessor" writer="job8.group.writer"
                             commit-interval="${job8.commit-interval}">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>

    </batch:job>

</beans>
